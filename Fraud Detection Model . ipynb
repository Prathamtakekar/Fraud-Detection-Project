{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"2EI269jG9IZr","executionInfo":{"status":"ok","timestamp":1751553923693,"user_tz":-330,"elapsed":3053,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.linear_model import LogisticRegression\n","from xgboost import XGBClassifier\n","from sklearn.metrics import accuracy_score, confusion_matrix, classification_report\n","import warnings\n","warnings.filterwarnings('ignore')\n"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"XYf61nq_9ZzY","colab":{"base_uri":"https://localhost:8080/","height":294},"executionInfo":{"status":"error","timestamp":1751554141539,"user_tz":-330,"elapsed":15,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}},"outputId":"3b202eb4-1c37-4062-b2ef-0a8a5812b53f"},"outputs":[{"output_type":"error","ename":"BadZipFile","evalue":"File is not a zip file","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mBadZipFile\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m/tmp/ipython-input-4-2763855881.py\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"/content/creditcard.csv.zip\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36mread_csv\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[0m\n\u001b[1;32m   1024\u001b[0m     \u001b[0mkwds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkwds_defaults\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1025\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1026\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1027\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1028\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    619\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 620\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    622\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m   1618\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1619\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhandles\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mIOHandles\u001b[0m \u001b[0;34m|\u001b[0m \u001b[0;32mNone\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1620\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1621\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1622\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/parsers/readers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, f, engine)\u001b[0m\n\u001b[1;32m   1878\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;34m\"b\"\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1879\u001b[0m                     \u001b[0mmode\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m\"b\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1880\u001b[0;31m             self.handles = get_handle(\n\u001b[0m\u001b[1;32m   1881\u001b[0m                 \u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1882\u001b[0m                 \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36mget_handle\u001b[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[0m\n\u001b[1;32m    792\u001b[0m             \u001b[0;31m# \"Union[str, BaseBuffer]\"; expected \"Union[Union[str, PathLike[str]],\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    793\u001b[0m             \u001b[0;31m# ReadBuffer[bytes], WriteBuffer[bytes]]\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 794\u001b[0;31m             handle = _BytesZipFile(\n\u001b[0m\u001b[1;32m    795\u001b[0m                 \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mioargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mcompression_args\u001b[0m  \u001b[0;31m# type: ignore[arg-type]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    796\u001b[0m             )\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/io/common.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, file, mode, archive_name, **kwargs)\u001b[0m\n\u001b[1;32m   1035\u001b[0m         \u001b[0;31m# error: Incompatible types in assignment (expression has type \"ZipFile\",\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1036\u001b[0m         \u001b[0;31m# base class \"_BufferedWriter\" defined the type as \"BytesIO\")\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1037\u001b[0;31m         self.buffer: zipfile.ZipFile = zipfile.ZipFile(  # type: ignore[assignment]\n\u001b[0m\u001b[1;32m   1038\u001b[0m             \u001b[0mfile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1039\u001b[0m         )\n","\u001b[0;32m/usr/lib/python3.11/zipfile.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, file, mode, compression, allowZip64, compresslevel, strict_timestamps, metadata_encoding)\u001b[0m\n\u001b[1;32m   1311\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1312\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1313\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_RealGetContents\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1314\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mmode\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'w'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'x'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1315\u001b[0m                 \u001b[0;31m# set the modified flag so central directory gets written\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.11/zipfile.py\u001b[0m in \u001b[0;36m_RealGetContents\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1378\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mBadZipFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"File is not a zip file\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1379\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mendrec\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1380\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mBadZipFile\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"File is not a zip file\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1381\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdebug\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1382\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mendrec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mBadZipFile\u001b[0m: File is not a zip file"]}],"source":["df = pd.read_csv(\"/content/creditcard.csv.zip\")"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":62,"status":"aborted","timestamp":1751553924046,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"},"user_tz":-330},"id":"nEUG9tE1AYm7"},"outputs":[],"source":["df.head()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3743,"status":"aborted","timestamp":1751553924049,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"},"user_tz":-330},"id":"_HS3WqPUAdKb"},"outputs":[],"source":["df.info()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3741,"status":"aborted","timestamp":1751553924052,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"},"user_tz":-330},"id":"jWz-sZ5yAnWd"},"outputs":[],"source":["df.describe()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3735,"status":"aborted","timestamp":1751553924053,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"},"user_tz":-330},"id":"qGeXhjYrAqR4"},"outputs":[],"source":["print(df.isnull().sum())"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3730,"status":"aborted","timestamp":1751553924054,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"},"user_tz":-330},"id":"vLP0H8zRA7x2"},"outputs":[],"source":["sns.countplot(x='Class', data=df)\n","plt.title('Distribution of Fraudulent Transactions')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3724,"status":"aborted","timestamp":1751553924056,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"},"user_tz":-330},"id":"Il-Nnmg-CCIt"},"outputs":[],"source":["plt.figure(figsize=(12,8))\n","sns.heatmap(df.corr(), annot=True, cmap='coolwarm')\n","plt.title('Feature Correlation')\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"jcVjQHNED646","executionInfo":{"status":"aborted","timestamp":1751553924058,"user_tz":-330,"elapsed":3724,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["if 'transcation_id' in df.columns:\n","    df.drop('transcation_id', axis=1, inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RwN9OpPiEcYk","executionInfo":{"status":"aborted","timestamp":1751553924059,"user_tz":-330,"elapsed":3724,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["df = pd.get_dummies(df, drop_first=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iaIdfOHAEuMO","executionInfo":{"status":"aborted","timestamp":1751553924061,"user_tz":-330,"elapsed":3725,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["scaler = StandardScaler()\n","features = df.drop('Class', axis=1)\n","X = scaler.fit_transform(features)\n","y = df['Class']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"RztuEup0E6Tl","executionInfo":{"status":"aborted","timestamp":1751553924062,"user_tz":-330,"elapsed":3726,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-0YV_xQoFVkh","executionInfo":{"status":"aborted","timestamp":1751553924064,"user_tz":-330,"elapsed":3727,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["lr = LogisticRegression()\n","lr.fit(X_train, y_train)\n","y_pred_lr = lr.predict(X_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3750,"status":"aborted","timestamp":1751553924090,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"},"user_tz":-330},"id":"FBjYUFcAFdMj"},"outputs":[],"source":["\n","print(\"Logistic Regression\")\n","print(classification_report(y_test, y_pred_lr))\n","print(confusion_matrix(y_test, y_pred_lr))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"xuc3M--8Fg92","executionInfo":{"status":"aborted","timestamp":1751553924091,"user_tz":-330,"elapsed":3750,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["rf = RandomForestClassifier(n_estimators=100, random_state=42)\n","rf.fit(X_train, y_train)\n","y_pred_rf = rf.predict(X_test)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3749,"status":"aborted","timestamp":1751553924093,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"},"user_tz":-330},"id":"1_1GGJFyFuZG"},"outputs":[],"source":["print(\"Random Forest\")\n","print(classification_report(y_test, y_pred_rf))\n","print(confusion_matrix(y_test, y_pred_rf))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"i_VQXX4ZHTUd","executionInfo":{"status":"aborted","timestamp":1751553924112,"user_tz":-330,"elapsed":3767,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["xgb = XGBClassifier(use_label_encoder=False, eval_metric='logloss')\n","xgb.fit(X_train, y_train)\n","y_pred_xgb = xgb.predict(X_test)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3762,"status":"aborted","timestamp":1751553924113,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"},"user_tz":-330},"id":"CXUDumsTHdnG"},"outputs":[],"source":["print(\"XGBoost Classifier\")\n","print(classification_report(y_test, y_pred_xgb))\n","print(confusion_matrix(y_test, y_pred_xgb))"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3779,"status":"aborted","timestamp":1751553924134,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"},"user_tz":-330},"id":"JqVQ_FFVHkcg"},"outputs":[],"source":["plt.figure(figsize=(10, 6))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"r5G3UnE-IfuN","executionInfo":{"status":"aborted","timestamp":1751553924136,"user_tz":-330,"elapsed":3780,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["from sklearn.metrics import roc_curve, auc\n"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3779,"status":"aborted","timestamp":1751553924139,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"},"user_tz":-330},"id":"Zi6a0XOyHyLd"},"outputs":[],"source":["y_probs_lr = lr.predict_proba(X_test)[:, 1]\n","fpr_lr, tpr_lr, _ = roc_curve(y_test, y_probs_lr)\n","plt.plot(fpr_lr, tpr_lr, label='Logistic Regression')"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3773,"status":"aborted","timestamp":1751553924141,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"},"user_tz":-330},"id":"jefEsbDxH7ZR"},"outputs":[],"source":["y_probs_rf = rf.predict_proba(X_test)[:, 1]\n","fpr_rf, tpr_rf, _ = roc_curve(y_test, y_probs_rf)\n","plt.plot(fpr_rf, tpr_rf, label='Random Forest')"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3768,"status":"aborted","timestamp":1751553924143,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"},"user_tz":-330},"id":"2kJikU2dIpcu"},"outputs":[],"source":["y_probs_xgb = xgb.predict_proba(X_test)[:, 1]\n","fpr_xgb, tpr_xgb, _ = roc_curve(y_test, y_probs_xgb)\n","plt.plot(fpr_xgb, tpr_xgb, label='XGBoost')"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3764,"status":"aborted","timestamp":1751553924144,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"},"user_tz":-330},"id":"XTeFsAH7IwXZ"},"outputs":[],"source":["plt.plot([0, 1], [0, 1], 'k--')\n","plt.xlabel(\"False Positive Rate\")\n","plt.ylabel(\"True Positive Rate\")\n","plt.title(\"ROC Curve Comparison\")\n","plt.legend()\n","plt.grid()\n","plt.show()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hEHMBWMxI1qj","executionInfo":{"status":"aborted","timestamp":1751553924145,"user_tz":-330,"elapsed":3764,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["from sklearn.model_selection import GridSearchCV\n","\n","param_grid = {\n","    'n_estimators': [100, 200],\n","    'max_depth': [3, 6, 10],\n","    'learning_rate': [0.01, 0.1],\n","    'subsample': [0.8, 1],\n","}"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VhJBKV1fKt8Q","executionInfo":{"status":"aborted","timestamp":1751553924147,"user_tz":-330,"elapsed":3761,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["grid = GridSearchCV(estimator=XGBClassifier(use_label_encoder=False, eval_metric='logloss'),\n","                    param_grid=param_grid,\n","                    cv=3,\n","                    scoring='f1',\n","                    verbose=1,\n","                    n_jobs=-1)\n","\n","grid.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"executionInfo":{"elapsed":3782,"status":"aborted","timestamp":1751553924171,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"},"user_tz":-330},"id":"RCW2vJobKxLo"},"outputs":[],"source":["best_model = grid.best_estimator_\n","print(\"Best Parameters:\", grid.best_params_)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"O8zupyY3Uo6c","executionInfo":{"status":"aborted","timestamp":1751553924174,"user_tz":-330,"elapsed":3781,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["from sklearn.pipeline import Pipeline\n","\n","pipeline = Pipeline([\n","    ('scaler', StandardScaler()),\n","    ('model', best_model)\n","])\n","\n","pipeline.fit(X_train, y_train)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"WvyeHX9vUpNQ","executionInfo":{"status":"aborted","timestamp":1751553924176,"user_tz":-330,"elapsed":3778,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["sample = np.array([[120.0, 1, 0, 0, 5000, 1, 0, 1]])\n","sample_pred = pipeline.predict(sample)\n","print(\"Prediction (0 = Not Fraud, 1 = Fraud):\", sample_pred[0])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ymWlLREzK1tJ","executionInfo":{"status":"aborted","timestamp":1751553924177,"user_tz":-330,"elapsed":3775,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["!pip install streamlit"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-68jLTXdPYyF","executionInfo":{"status":"aborted","timestamp":1751553924178,"user_tz":-330,"elapsed":3772,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["%%writefile app.py\n","import streamlit as st\n","import numpy as np\n","import joblib\n","from sklearn.model_selection import train_test_split\n","from sklearn.pipeline import Pipeline\n"]},{"cell_type":"code","source":["df = pd.read_csv(\"/content/creditcard.csv.zip\")\n","df.head()"],"metadata":{"id":"lynhlYY3mVvw","executionInfo":{"status":"aborted","timestamp":1751553924180,"user_tz":-330,"elapsed":3771,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9YE_U3X0Pu-i","executionInfo":{"status":"aborted","timestamp":1751553924198,"user_tz":-330,"elapsed":3788,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["df = pd.get_dummies(df, drop_first=True)  # Handle categoricals\n","X = df.drop('Class', axis=1)\n","y = df['Class']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mplKdypuPvLw","executionInfo":{"status":"aborted","timestamp":1751553924202,"user_tz":-330,"elapsed":3792,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"yU53WIwUPvZZ","executionInfo":{"status":"aborted","timestamp":1751553924204,"user_tz":-330,"elapsed":3792,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["pipeline = Pipeline([\n","    ('scaler', StandardScaler()),\n","    ('xgb', XGBClassifier(use_label_encoder=False, eval_metric='logloss'))\n","])\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"CYYnwvu_Pvkx","executionInfo":{"status":"aborted","timestamp":1751553924206,"user_tz":-330,"elapsed":3786,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["\n","pipeline.fit(X_train, y_train)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"FN-bcUEkPvyb","executionInfo":{"status":"aborted","timestamp":1751553924207,"user_tz":-330,"elapsed":3783,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["joblib.dump(pipeline, 'fraud_detection_pipeline.pkl')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Krwax3RHQV8d","executionInfo":{"status":"aborted","timestamp":1751553924209,"user_tz":-330,"elapsed":3784,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["model = joblib.load('fraud_detection_pipeline.pkl')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JgbVS1PxQWLx","executionInfo":{"status":"aborted","timestamp":1751553924212,"user_tz":-330,"elapsed":3787,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["import streamlit as st\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UN3qTbVdQWbj","executionInfo":{"status":"aborted","timestamp":1751553924217,"user_tz":-330,"elapsed":3789,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["model = joblib.load('fraud_detection_pipeline.pkl')\n","\n","st.title(\"🔍 Real-Time Fraud Detection Simulator\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VLQPkFJcQWkz","executionInfo":{"status":"aborted","timestamp":1751553924220,"user_tz":-330,"elapsed":3789,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["amount = st.number_input(\"Transaction Amount\")\n","feature1 = st.selectbox(\"Feature 1 (is_international)\", [0, 1])\n","feature2 = st.selectbox(\"Feature 2 (card_present)\", [0, 1])\n","feature3 = st.selectbox(\"Feature 3 (online)\", [0, 1])\n","balance = st.number_input(\"Account Balance\")\n","feature4 = st.selectbox(\"Feature 4\", [0, 1])\n","feature5 = st.selectbox(\"Feature 5\", [0, 1])\n","feature6 = st.selectbox(\"Feature 6\", [0, 1])"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rC3xCvcHQWuN","executionInfo":{"status":"aborted","timestamp":1751553924221,"user_tz":-330,"elapsed":3787,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["if st.button(\"Predict Fraud\"):\n","    user_input = np.array([[amount, V1, V2, V3, balance, V4, V5, V6]])\n","    prediction = model.predict(user_input)[0]\n","    result = \"Fraudulent ❌\" if prediction == 1 else \"Legitimate ✅\"\n","    st.success(f\"Transaction is {result}\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"d6l7jZjzQW4L","executionInfo":{"status":"aborted","timestamp":1751553924223,"user_tz":-330,"elapsed":3786,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["!pip install pyngrok"]},{"cell_type":"code","source":[],"metadata":{"id":"HptummQcvpyP","executionInfo":{"status":"aborted","timestamp":1751553924224,"user_tz":-330,"elapsed":3786,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"74lKKfQCvp-e","executionInfo":{"status":"aborted","timestamp":1751553924226,"user_tz":-330,"elapsed":3788,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!ngrok config add-authtoken YOUR_AUTHTOKEN_HERE\n"],"metadata":{"id":"xTZkvES4vqIK","executionInfo":{"status":"aborted","timestamp":1751553924227,"user_tz":-330,"elapsed":3786,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!ngrok config add-authtoken 2wXmWXNnOeaEkEzF6fepuiNIrf6_322P5buwUndXcXPrkJwdc\n"],"metadata":{"id":"eSHYNoHJu1li","executionInfo":{"status":"aborted","timestamp":1751553924228,"user_tz":-330,"elapsed":3784,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!cat /root/.ngrok2/ngrok.yml\n"],"metadata":{"id":"J9wwBxaIv0SS","executionInfo":{"status":"aborted","timestamp":1751553924229,"user_tz":-330,"elapsed":3782,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!mkdir -p /root/.ngrok2\n","!echo \"authtoken: YOUR_AUTHTOKEN_HERE\" > /root/.ngrok2/ngrok.yml\n"],"metadata":{"id":"4CQm3hmmv0hv","executionInfo":{"status":"aborted","timestamp":1751553924251,"user_tz":-330,"elapsed":3803,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TjHdvoqZQXE2","executionInfo":{"status":"aborted","timestamp":1751553924284,"user_tz":-330,"elapsed":3836,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"outputs":[],"source":["public_url = ngrok.connect(addr=\"8501\", proto=\"http\")\n"]},{"cell_type":"code","source":["from pyngrok import ngrok\n","\n","get_ipython().system('pkill streamlit')\n","\n","get_ipython().system_raw('streamlit run app.py &')\n","\n","public_url = ngrok.connect(addr=\"8501\", proto=\"http\")\n","print(\"🚀 Streamlit App is Live at:\", public_url)\n"],"metadata":{"id":"rmiwjm2huIUi","executionInfo":{"status":"aborted","timestamp":1751553924286,"user_tz":-330,"elapsed":3835,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"Hywv2U6Swym9","executionInfo":{"status":"aborted","timestamp":1751553924287,"user_tz":-330,"elapsed":3836,"user":{"displayName":"Pratham Takekar","userId":"17609830043517595956"}}},"execution_count":null,"outputs":[]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[],"authorship_tag":"ABX9TyOIG9Tipy005A3sqpU1+jbz"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}